// Code generated by mockery v2.45.1. DO NOT EDIT.

package http

import mock "github.com/stretchr/testify/mock"

// MockRule is an autogenerated mock type for the Rule type
type MockRule struct {
	mock.Mock
}

// MatchRequest provides a mock function with given fields: _a0
func (_m *MockRule) MatchRequest(_a0 Request) bool {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for MatchRequest")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(Request) bool); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Response provides a mock function with given fields: _a0
func (_m *MockRule) Response(_a0 Request) (Response, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Response")
	}

	var r0 Response
	var r1 error
	if rf, ok := ret.Get(0).(func(Request) (Response, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(Request) Response); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(Response)
	}

	if rf, ok := ret.Get(1).(func(Request) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockRule creates a new instance of MockRule. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRule(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRule {
	mock := &MockRule{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
